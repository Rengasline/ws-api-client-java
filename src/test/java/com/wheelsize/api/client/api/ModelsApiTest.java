/*
 * Wheel Fitment API
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wheelsize.api.client.api;

import com.wheelsize.api.client.ApiException;
import com.wheelsize.api.client.model.Model;
import com.wheelsize.api.client.model.ModelWithTires;
import org.junit.Test;
import org.junit.Ignore;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModelsApi
 */
@Ignore
public class ModelsApiTest {

    private final ModelsApi api = new ModelsApi();

    
    /**
     * Returns a list of models by manufacturer
     *
     * Get a list of models that match given manufacturer and year (if present)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelsListTest() throws ApiException {
        String make = "mitsubishi";
        String lang = null;
        List<Model> response = api.modelsList(make, null, lang);
        List<Model> response2 = api.modelsList(make, 2015, lang);

        // TODO: test validations
        assertTrue("Response list should not be empty", response.size() > 0);
        assertTrue("Filtered response list should not be empty", response2.size() > 0);
        assertTrue(response2.size() < response.size());
    }
    
    /**
     * Get more info about model
     *
     * Get the detailed information about model series
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelsReadTest() throws ApiException {
        String make = "mitsubishi";
        String slug = "outlander";
        String lang = null;
        ModelWithTires response = api.modelsRead(make, slug, lang);

        // TODO: test validations
        assertNull(response.getYear());
        assertTrue(response.getYears().size() > 0);
    }
    
    /**
     * Get more info about model/year
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modelsReadYearTest() throws ApiException {
        String make = "mitsubishi";
        String slug = "outlander";
        Integer year = 2015;
        String lang = null;
        ModelWithTires response = api.modelsReadYear(make, slug, year, lang);

        // TODO: test validations
        assertNotNull(response.getYear());
        assertTrue(response.getYears().size() > 0);
    }
    
}
