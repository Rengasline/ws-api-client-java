/*
 * Wheel Fitment API
 * The Wheel Fitment API allows for programmatic access to the database of www.wheel-size.com and its services. Use this API to retrieve information about vehicle fitment database for rims and tires, including OE and option fitments, and plus/minus sizing fitment information. A variety of country and language specific options are available. The coverage of fitment data for vehicles manufactured since 2000 is nearly 100%.  The information about fitment data is updated on a daily basis.
 *
 * OpenAPI spec version: v1
 * Contact: info@wheel-size.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wheelsize.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.wheelsize.api.client.model.Generation;
import com.wheelsize.api.client.model.Market;
import com.wheelsize.api.client.model.Power;
import com.wheelsize.api.client.model.WheelPair;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * Vehicle
 */

public class Vehicle {
  @SerializedName("market")
  private Market market = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("trim")
  private String trim = null;

  @SerializedName("generation")
  private Generation generation = null;

  @SerializedName("stud_holes")
  private Integer studHoles = null;

  @SerializedName("pcd")
  private BigDecimal pcd = null;

  @SerializedName("centre_bore")
  private BigDecimal centreBore = null;

  /**
   * Gets or Sets lockType
   */
  @JsonAdapter(LockTypeEnum.Adapter.class)
  public enum LockTypeEnum {
    NUT("nut"),
    
    BOLT("bolt");

    private String value;

    LockTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LockTypeEnum fromValue(String text) {
      for (LockTypeEnum b : LockTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LockTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LockTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LockTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LockTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("lock_type")
  private LockTypeEnum lockType = null;

  /**
   * Lock thread size (e.g. &#x60;M12 x 1.25&#x60;, can be __*&#x60;null&#x60;*__)
   */
  @JsonAdapter(LockTextEnum.Adapter.class)
  public enum LockTextEnum {
    M10_X_1_25("M10 x 1.25"),
    
    M12_X_1_25("M12 x 1.25"),
    
    M12_X_1_5("M12 x 1.5"),
    
    M12_X_1_75("M12 x 1.75"),
    
    M14_X_1_25("M14 x 1.25"),
    
    M14_X_1_5("M14 x 1.5"),
    
    M14_X_2_0("M14 x 2.0"),
    
    M16_X_1_5("M16 x 1.5"),
    
    _3_8_24_UNF("3/8\\\" - 24 UNF"),
    
    _7_16_20_UNF("7/16\\\" - 20 UNF"),
    
    _1_2_20_UNF("1/2\\\" - 20 UNF"),
    
    _9_16_18_UNF("9/16\\\" - 18 UNF");

    private String value;

    LockTextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LockTextEnum fromValue(String text) {
      for (LockTextEnum b : LockTextEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LockTextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LockTextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LockTextEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LockTextEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("lock_text")
  private LockTextEnum lockText = null;

  @SerializedName("bolt_pattern")
  private String boltPattern = null;

  @SerializedName("power")
  private Power power = null;

  @SerializedName("fuel")
  private String fuel = null;

  @SerializedName("wheels")
  private List<WheelPair> wheels = null;

  public Vehicle market(Market market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  @ApiModelProperty(required = true, value = "")
  public Market getMarket() {
    return market;
  }

  public void setMarket(Market market) {
    this.market = market;
  }

  public Vehicle body(String body) {
    this.body = body;
    return this;
  }

   /**
   * Body name. Used extensively for JDM market (e.g. &#x60;GG2W&#x60;, can be __*&#x60;null&#x60;*__)
   * @return body
  **/
  @ApiModelProperty(required = true, value = "Body name. Used extensively for JDM market (e.g. `GG2W`, can be __*`null`*__)")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public Vehicle trim(String trim) {
    this.trim = trim;
    return this;
  }

   /**
   * Trim name. It can be empty for models created for JDM market (e.g. &#x60;2.0&#x60;, can be __*&#x60;null&#x60;*__)
   * @return trim
  **/
  @ApiModelProperty(required = true, value = "Trim name. It can be empty for models created for JDM market (e.g. `2.0`, can be __*`null`*__)")
  public String getTrim() {
    return trim;
  }

  public void setTrim(String trim) {
    this.trim = trim;
  }

  public Vehicle generation(Generation generation) {
    this.generation = generation;
    return this;
  }

   /**
   * Get generation
   * @return generation
  **/
  @ApiModelProperty(required = true, value = "")
  public Generation getGeneration() {
    return generation;
  }

  public void setGeneration(Generation generation) {
    this.generation = generation;
  }

  public Vehicle studHoles(Integer studHoles) {
    this.studHoles = studHoles;
    return this;
  }

   /**
   * Number of stud holes (e.g. &#x60;5&#x60;, can be __*&#x60;null&#x60;*__)
   * @return studHoles
  **/
  @ApiModelProperty(required = true, value = "Number of stud holes (e.g. `5`, can be __*`null`*__)")
  public Integer getStudHoles() {
    return studHoles;
  }

  public void setStudHoles(Integer studHoles) {
    this.studHoles = studHoles;
  }

  public Vehicle pcd(BigDecimal pcd) {
    this.pcd = pcd;
    return this;
  }

   /**
   * Pitch circle diameter, mm (e.g. &#x60;105&#x60;, can be __*&#x60;null&#x60;*__)
   * @return pcd
  **/
  @ApiModelProperty(required = true, value = "Pitch circle diameter, mm (e.g. `105`, can be __*`null`*__)")
  public BigDecimal getPcd() {
    return pcd;
  }

  public void setPcd(BigDecimal pcd) {
    this.pcd = pcd;
  }

  public Vehicle centreBore(BigDecimal centreBore) {
    this.centreBore = centreBore;
    return this;
  }

   /**
   * Centre bore diameter, mm (e.g. &#x60;48.1&#x60;, can be __*&#x60;null&#x60;*__)
   * @return centreBore
  **/
  @ApiModelProperty(required = true, value = "Centre bore diameter, mm (e.g. `48.1`, can be __*`null`*__)")
  public BigDecimal getCentreBore() {
    return centreBore;
  }

  public void setCentreBore(BigDecimal centreBore) {
    this.centreBore = centreBore;
  }

  public Vehicle lockType(LockTypeEnum lockType) {
    this.lockType = lockType;
    return this;
  }

   /**
   * Get lockType
   * @return lockType
  **/
  @ApiModelProperty(value = "")
  public LockTypeEnum getLockType() {
    return lockType;
  }

  public void setLockType(LockTypeEnum lockType) {
    this.lockType = lockType;
  }

  public Vehicle lockText(LockTextEnum lockText) {
    this.lockText = lockText;
    return this;
  }

   /**
   * Lock thread size (e.g. &#x60;M12 x 1.25&#x60;, can be __*&#x60;null&#x60;*__)
   * @return lockText
  **/
  @ApiModelProperty(required = true, value = "Lock thread size (e.g. `M12 x 1.25`, can be __*`null`*__)")
  public LockTextEnum getLockText() {
    return lockText;
  }

  public void setLockText(LockTextEnum lockText) {
    this.lockText = lockText;
  }

  public Vehicle boltPattern(String boltPattern) {
    this.boltPattern = boltPattern;
    return this;
  }

   /**
   * Bolt pattern (e.g. &#x60;5x105&#x60;, can be __*&#x60;N/A&#x60;*__)
   * @return boltPattern
  **/
  @ApiModelProperty(required = true, value = "Bolt pattern (e.g. `5x105`, can be __*`N/A`*__)")
  public String getBoltPattern() {
    return boltPattern;
  }

  public void setBoltPattern(String boltPattern) {
    this.boltPattern = boltPattern;
  }

  public Vehicle power(Power power) {
    this.power = power;
    return this;
  }

   /**
   * Get power
   * @return power
  **/
  @ApiModelProperty(value = "")
  public Power getPower() {
    return power;
  }

  public void setPower(Power power) {
    this.power = power;
  }

  public Vehicle fuel(String fuel) {
    this.fuel = fuel;
    return this;
  }

   /**
   * Fuel (e.g. &#x60;Petrol&#x60;, can be __*&#x60;null&#x60;*__)
   * @return fuel
  **/
  @ApiModelProperty(value = "Fuel (e.g. `Petrol`, can be __*`null`*__)")
  public String getFuel() {
    return fuel;
  }

  public void setFuel(String fuel) {
    this.fuel = fuel;
  }

  public Vehicle wheels(List<WheelPair> wheels) {
    this.wheels = wheels;
    return this;
  }

  public Vehicle addWheelsItem(WheelPair wheelsItem) {
    if (this.wheels == null) {
      this.wheels = new ArrayList<WheelPair>();
    }
    this.wheels.add(wheelsItem);
    return this;
  }

   /**
   * Get wheels
   * @return wheels
  **/
  @ApiModelProperty(value = "")
  public List<WheelPair> getWheels() {
    return wheels;
  }

  public void setWheels(List<WheelPair> wheels) {
    this.wheels = wheels;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vehicle vehicle = (Vehicle) o;
    return Objects.equals(this.market, vehicle.market) &&
        Objects.equals(this.body, vehicle.body) &&
        Objects.equals(this.trim, vehicle.trim) &&
        Objects.equals(this.generation, vehicle.generation) &&
        Objects.equals(this.studHoles, vehicle.studHoles) &&
        Objects.equals(this.pcd, vehicle.pcd) &&
        Objects.equals(this.centreBore, vehicle.centreBore) &&
        Objects.equals(this.lockType, vehicle.lockType) &&
        Objects.equals(this.lockText, vehicle.lockText) &&
        Objects.equals(this.boltPattern, vehicle.boltPattern) &&
        Objects.equals(this.power, vehicle.power) &&
        Objects.equals(this.fuel, vehicle.fuel) &&
        Objects.equals(this.wheels, vehicle.wheels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(market, body, trim, generation, studHoles, pcd, centreBore, lockType, lockText, boltPattern, power, fuel, wheels);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vehicle {\n");
    
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    trim: ").append(toIndentedString(trim)).append("\n");
    sb.append("    generation: ").append(toIndentedString(generation)).append("\n");
    sb.append("    studHoles: ").append(toIndentedString(studHoles)).append("\n");
    sb.append("    pcd: ").append(toIndentedString(pcd)).append("\n");
    sb.append("    centreBore: ").append(toIndentedString(centreBore)).append("\n");
    sb.append("    lockType: ").append(toIndentedString(lockType)).append("\n");
    sb.append("    lockText: ").append(toIndentedString(lockText)).append("\n");
    sb.append("    boltPattern: ").append(toIndentedString(boltPattern)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    fuel: ").append(toIndentedString(fuel)).append("\n");
    sb.append("    wheels: ").append(toIndentedString(wheels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

